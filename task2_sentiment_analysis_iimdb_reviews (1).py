# -*- coding: utf-8 -*-
"""Task2_Sentiment_Analysis IIMDB REviews.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1D4CiGEHK3Wpk0Rx2HqEVYAJH3otxdoDA

# Task 2: Sentiment Analysis using IMDB Reviews
---
This notebook performs sentiment analysis on IMDB movie reviews. The steps include:
- Loading the dataset
- Reducing to 1000 reviews (balanced: 500 positive, 500 negative)
- Preprocessing text
- Splitting into train/test
- Converting text to features using CountVectorizer
- Training Logistic Regression model
- Evaluating model performance
- Predicting sentiment for new reviews
"""

# 1. Import Libraries
import pandas as pd
import numpy as np
import re
import string
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report
import nltk
from nltk.corpus import stopwords

# Download stopwords if not already
nltk.download('stopwords')
stop_words = set(stopwords.words('english'))

# 1. Load Dataset (1000 reviews with 'review' and 'sentiment' columns)
df = pd.read_csv("imdb_reviews_1000.csv")

# 4. Preprocessing Function
def clean_text(text):
    text = text.lower()  # lowercase
    text = re.sub(r"<.*?>", "", text)  # remove HTML tags
    text = re.sub(f"[{re.escape(string.punctuation)}]", "", text)  # remove punctuation
    text = re.sub(r"\d+", "", text)  # remove numbers
    return text

df['clean_review'] = df['review'].apply(clean_text)

# 5. Train/Test Split
# 3. Train/Test Split
X = df['clean_review']
y = df['sentiment']

X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42, stratify=y
)
print("Train size:", len(X_train))
print("Test size:", len(X_test))

# Save train & test datasets
train_df = pd.DataFrame({"review": X_train, "sentiment": y_train})
test_df = pd.DataFrame({"review": X_test, "sentiment": y_test})

train_df.to_csv("train_reviews.csv", index=False)
test_df.to_csv("test_reviews.csv", index=False)

print("Saved train_reviews.csv and test_reviews.csv")

# 6. Feature Extraction (Bag of Words)
vectorizer = CountVectorizer(stop_words='english', max_features=5000)
X_train_vec = vectorizer.fit_transform(X_train)
X_test_vec = vectorizer.transform(X_test)

# 7. Train Logistic Regression
model = LogisticRegression(max_iter=1000)
model.fit(X_train_vec, y_train)

# 8. Evaluation
y_pred = model.predict(X_test_vec)
print("Model Accuracy:", accuracy_score(y_test, y_pred))

# 9. Predict New Reviews
def predict_sentiment(review):
    review = clean_text(review)
    review_vec = vectorizer.transform([review])
    return model.predict(review_vec)[0]

print("\n--- Sentiment Prediction ---")
user_review = input("Enter a movie review: ")
print("Predicted Sentiment:", predict_sentiment(user_review))